<?xml version="1.0" encoding="utf-8"?>
<AxDataEntityView xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>AAXTableEntity</Name>
	<SourceCode>
		<Declaration><![CDATA[
public class AAXTableEntity extends common
{
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>aosValidateDelete</Name>
				<Source><![CDATA[
    /// <summary>
    ///
    /// </summary>
    /// <returns></returns>
    public boolean aosValidateDelete()
    {
        boolean ret;
    
        AAXActivityLogger::writeToFile(funcName());

        ret = super();
    
        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>aosValidateInsert</Name>
				<Source><![CDATA[
    /// <summary>
    ///
    /// </summary>
    /// <returns></returns>
    public boolean aosValidateInsert()
    {
        boolean ret;

        AAXActivityLogger::writeToFile(funcName());
    
        ret = super();
    
        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>aosValidateRead</Name>
				<Source><![CDATA[
    /// <summary>
    ///
    /// </summary>
    /// <returns></returns>
    public boolean aosValidateRead()
    {
        boolean ret;

        AAXActivityLogger::writeToFile(funcName());
    
        ret = super();
    
        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>aosValidateUpdate</Name>
				<Source><![CDATA[
    /// <summary>
    ///
    /// </summary>
    /// <returns></returns>
    public boolean aosValidateUpdate()
    {
        boolean ret;

        AAXActivityLogger::writeToFile(funcName());
    
        ret = super();
    
        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>clear</Name>
				<Source><![CDATA[
    /// <summary>
    ///
    /// </summary>
    public void clear()
    {
        AAXActivityLogger::writeToFile(funcName());

        super();
    }

]]></Source>
			</Method>
			<Method>
				<Name>defaultField</Name>
				<Source><![CDATA[
    /// <summary>
    ///
    /// </summary>
    /// <param name = "_fieldId"></param>
    public void defaultField(FieldId _fieldId)
    {
        AAXActivityLogger::writeToFile(funcName());

        super(_fieldId);
    }

]]></Source>
			</Method>
			<Method>
				<Name>defaultRow</Name>
				<Source><![CDATA[
    /// <summary>
    ///
    /// </summary>
    public void defaultRow()
    {
        AAXActivityLogger::writeToFile(funcName());

        super();
    }

]]></Source>
			</Method>
			<Method>
				<Name>delete</Name>
				<Source><![CDATA[
    /// <summary>
    ///
    /// </summary>
    public void delete()
    {
        AAXActivityLogger::writeToFile(funcName());

        super();
    }

]]></Source>
			</Method>
			<Method>
				<Name>deleteEntityDataSource</Name>
				<Source><![CDATA[
    /// <summary>
    ///
    /// </summary>
    /// <param name = "_entityCtx"></param>
    /// <param name = "_dataSourceCtx"></param>
    /// <returns></returns>
    public boolean deleteEntityDataSource(DataEntityRuntimeContext _entityCtx, DataEntityDataSourceRuntimeContext _dataSourceCtx)
    {
        boolean ret;
    
        AAXActivityLogger::writeToFile(funcName());

        ret = super(_entityCtx, _dataSourceCtx);
    
        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>findEntityDataSource</Name>
				<Source><![CDATA[
    /// <summary>
    ///
    /// </summary>
    /// <param name = "_entityCtx"></param>
    /// <param name = "_dataSourceCtx"></param>
    /// <returns></returns>
    public Common findEntityDataSource(DataEntityRuntimeContext _entityCtx, DataEntityDataSourceRuntimeContext _dataSourceCtx)
    {
        Common ret;

        AAXActivityLogger::writeToFile(funcName());
    
        ret = super(_entityCtx, _dataSourceCtx);
    
        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>initializeEntityDataSource</Name>
				<Source><![CDATA[
    /// <summary>
    ///
    /// </summary>
    /// <param name = "_entityCtx"></param>
    /// <param name = "_dataSourceCtx"></param>
    public void initializeEntityDataSource(DataEntityRuntimeContext _entityCtx, DataEntityDataSourceRuntimeContext _dataSourceCtx)
    {
        AAXActivityLogger::writeToFile(funcName());

        super(_entityCtx, _dataSourceCtx);
    }

]]></Source>
			</Method>
			<Method>
				<Name>initValue</Name>
				<Source><![CDATA[
    /// <summary>
    ///
    /// </summary>
    public void initValue()
    {
        AAXActivityLogger::writeToFile(funcName());

        super();
    }

]]></Source>
			</Method>
			<Method>
				<Name>insert</Name>
				<Source><![CDATA[
    /// <summary>
    ///
    /// </summary>
    public void insert()
    {
        AAXActivityLogger::writeToFile(funcName());

        super();
    }

]]></Source>
			</Method>
			<Method>
				<Name>insertEntityDataSource</Name>
				<Source><![CDATA[
    /// <summary>
    ///
    /// </summary>
    /// <param name = "_entityCtx"></param>
    /// <param name = "_dataSourceCtx"></param>
    /// <returns></returns>
    public boolean insertEntityDataSource(DataEntityRuntimeContext _entityCtx, DataEntityDataSourceRuntimeContext _dataSourceCtx)
    {
        boolean ret;

        AAXActivityLogger::writeToFile(funcName());
    
        ret = super(_entityCtx, _dataSourceCtx);
    
        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>mapDataSourceToEntity</Name>
				<Source><![CDATA[
    /// <summary>
    ///
    /// </summary>
    /// <param name = "_entityCtx"></param>
    /// <param name = "_dataSourceCtx"></param>
    public void mapDataSourceToEntity(DataEntityRuntimeContext _entityCtx, DataEntityDataSourceRuntimeContext _dataSourceCtx)
    {
        AAXActivityLogger::writeToFile(funcName());

        super(_entityCtx, _dataSourceCtx);
    }

]]></Source>
			</Method>
			<Method>
				<Name>mapEntityToDataSource</Name>
				<Source><![CDATA[
    /// <summary>
    ///
    /// </summary>
    /// <param name = "_entityCtx"></param>
    /// <param name = "_dataSourceCtx"></param>
    public void mapEntityToDataSource(DataEntityRuntimeContext _entityCtx, DataEntityDataSourceRuntimeContext _dataSourceCtx)
    {
        AAXActivityLogger::writeToFile(funcName());

        super(_entityCtx, _dataSourceCtx);
    }

]]></Source>
			</Method>
			<Method>
				<Name>modifiedField</Name>
				<Source><![CDATA[
    /// <summary>
    ///
    /// </summary>
    /// <param name = "_fieldId"></param>
    public void modifiedField(FieldId _fieldId)
    {
        AAXActivityLogger::writeToFile(funcName());

        super(_fieldId);
    }

]]></Source>
			</Method>
			<Method>
				<Name>modifiedFieldValue</Name>
				<Source><![CDATA[
    /// <summary>
    ///
    /// </summary>
    /// <param name = "_fieldName"></param>
    /// <param name = "_arrayIndex"></param>
    public void modifiedFieldValue(FieldName _fieldName, int _arrayIndex = 1)
    {
        AAXActivityLogger::writeToFile(funcName());

        super(_fieldName, _arrayIndex);
    }

]]></Source>
			</Method>
			<Method>
				<Name>persistEntity</Name>
				<Source><![CDATA[
    /// <summary>
    ///
    /// </summary>
    /// <param name = "_entityCtx"></param>
    public void persistEntity(DataEntityRuntimeContext _entityCtx)
    {
        AAXActivityLogger::writeToFile(funcName());

        super(_entityCtx);
    }

]]></Source>
			</Method>
			<Method>
				<Name>postCacheLoad</Name>
				<Source><![CDATA[
    /// <summary>
    ///
    /// </summary>
    public void postCacheLoad()
    {
        AAXActivityLogger::writeToFile(funcName());

        super();
    }

]]></Source>
			</Method>
			<Method>
				<Name>postLoad</Name>
				<Source><![CDATA[
    /// <summary>
    ///
    /// </summary>
    public void postLoad()
    {
        AAXActivityLogger::writeToFile(funcName());

        super();
    }

]]></Source>
			</Method>
			<Method>
				<Name>reread</Name>
				<Source><![CDATA[
    /// <summary>
    ///
    /// </summary>
    public void reread()
    {
        AAXActivityLogger::writeToFile(funcName());

        super();
    }

]]></Source>
			</Method>
			<Method>
				<Name>tableAccessRight</Name>
				<Source><![CDATA[
    /// <summary>
    ///
    /// </summary>
    /// <returns></returns>
    public AccessRight tableAccessRight()
    {
        AccessRight ret;

        AAXActivityLogger::writeToFile(funcName());
    
        ret = super();
    
        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>tableBufferAccessRight</Name>
				<Source><![CDATA[
    /// <summary>
    ///
    /// </summary>
    /// <returns></returns>
    public AccessRight tableBufferAccessRight()
    {
        AccessRight ret;

        AAXActivityLogger::writeToFile(funcName());
    
        ret = super();
    
        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>update</Name>
				<Source><![CDATA[
    /// <summary>
    ///
    /// </summary>
    public void update()
    {
        AAXActivityLogger::writeToFile(funcName());

        super();
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateEntityDataSource</Name>
				<Source><![CDATA[
    /// <summary>
    ///
    /// </summary>
    /// <param name = "_entityCtx"></param>
    /// <param name = "_dataSourceCtx"></param>
    /// <returns></returns>
    public boolean updateEntityDataSource(DataEntityRuntimeContext _entityCtx, DataEntityDataSourceRuntimeContext _dataSourceCtx)
    {
        boolean ret;

        AAXActivityLogger::writeToFile(funcName());
    
        ret = super(_entityCtx, _dataSourceCtx);
    
        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>useExistingTempDBTable</Name>
				<Source><![CDATA[
    /// <summary>
    ///
    /// </summary>
    /// <param name = "physicalTempTableName"></param>
    /// <returns></returns>
    public boolean useExistingTempDBTable(str physicalTempTableName)
    {
        boolean ret;

        AAXActivityLogger::writeToFile(funcName());
    
        ret = super(physicalTempTableName);
    
        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateDelete</Name>
				<Source><![CDATA[
    /// <summary>
    ///
    /// </summary>
    /// <returns></returns>
    public boolean validateDelete()
    {
        boolean ret;

        AAXActivityLogger::writeToFile(funcName());
    
        ret = super();
    
        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateField</Name>
				<Source><![CDATA[
    /// <summary>
    ///
    /// </summary>
    /// <param name = "_fieldIdToCheck"></param>
    /// <returns></returns>
    public boolean validateField(FieldId _fieldIdToCheck)
    {
        boolean ret;

        AAXActivityLogger::writeToFile(funcName());
    
        ret = super(_fieldIdToCheck);
    
        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateFieldValue</Name>
				<Source><![CDATA[
    /// <summary>
    ///
    /// </summary>
    /// <param name = "_fieldName"></param>
    /// <param name = "_arrayIndex"></param>
    /// <returns></returns>
    public boolean validateFieldValue(FieldName _fieldName, int _arrayIndex = 1)
    {
        boolean ret;

        AAXActivityLogger::writeToFile(funcName());
    
        ret = super(_fieldName, _arrayIndex);
    
        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateWrite</Name>
				<Source><![CDATA[
    /// <summary>
    ///
    /// </summary>
    /// <returns></returns>
    public boolean validateWrite()
    {
        boolean ret;

        AAXActivityLogger::writeToFile(funcName());
    
        ret = super();
    
        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>write</Name>
				<Source><![CDATA[
    /// <summary>
    ///
    /// </summary>
    public void write()
    {
        AAXActivityLogger::writeToFile(funcName());

        super();
    }

]]></Source>
			</Method>
			<Method>
				<Name>countRecordsInstance</Name>
				<Source><![CDATA[
    [SysODataAction("countRecordsInstance", true)]
    public int countRecordsInstance()
    {
        AAXTable AAXTable;

        select count(RecId)
            from AAXTable;
    
        int ret = AAXTable.RecId;

        return(ret);

    }

]]></Source>
			</Method>
			<Method>
				<Name>countRecordsStatic</Name>
				<Source><![CDATA[
    [SysODataAction("countRecordsStatic", false)]
    public static int countRecordsStatic()
    {
        AAXTable AAXTable;

        select count(RecId)
            from AAXTable;
    
        int ret = AAXTable.RecId;

        return(ret);

    }

]]></Source>
			</Method>
			<Method>
				<Name>postGetStagingData</Name>
				<Source><![CDATA[
    public static void postGetStagingData(DMFDefinitionGroupExecution _dmfDefinitionGroupExecution)
    {
        AAXActivityLogger::writeToFile(funcName());
    }

]]></Source>
			</Method>
			<Method>
				<Name>defaultCTQuery</Name>
				<Source><![CDATA[
    public static Query defaultCTQuery(DictDataEntity dataEntity)
    {
        AAXActivityLogger::writeToFile(funcName());

        return null;
    }

]]></Source>
			</Method>
			<Method>
				<Name>copyCustomStagingToTarget</Name>
				<Source><![CDATA[
    public static container copyCustomStagingToTarget(DMFDefinitionGroupExecution _dmfDefinitionGroupExecution)
    {
        AAXActivityLogger::writeToFile(funcName());

        return connull();
    }

]]></Source>
			</Method>
			<Method>
				<Name>preTargetSetBased</Name>
				<Source><![CDATA[
    public static void preTargetSetBased(DMFDefinitionGroupExecution _dmfDefinitionGroupExecution)
    {
        AAXActivityLogger::writeToFile(funcName());

    }

]]></Source>
			</Method>
			<Method>
				<Name>postTarget</Name>
				<Source><![CDATA[
    public static void postTarget(DMFDefinitionGroupExecution _dmfDefinitionGroupExecution)
    {
        AAXActivityLogger::writeToFile(funcName());

    }

]]></Source>
			</Method>
			<Method>
				<Name>orderByFieldListForImportExport</Name>
				<Source><![CDATA[
    public static container orderByFieldListForImportExport(str _tableName, DMFOperationType _operationType = DMFOperationType::All)
    {
        container fieldList = conNull();
        SortOrder sortOrder = SortOrder::Ascending;
        DictTable dictTable = new DictTable(tablename2id(_tableName));

        AAXActivityLogger::writeToFile(funcName());
        
        return [fieldList, sortOrder];
    }

]]></Source>
			</Method>
			<Method>
				<Name>postStaging</Name>
				<Source><![CDATA[
    public static void postStaging(DMFDefinitionGroupExecution _dmfDefinitionGroupExecution)
    {
        AAXActivityLogger::writeToFile(funcName());
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
	<SubscriberAccessLevel>
		<Read>Allow</Read>
	</SubscriberAccessLevel>
	<DataManagementEnabled>Yes</DataManagementEnabled>
	<DataManagementStagingTable>AAXTableStaging</DataManagementStagingTable>
	<IsPublic>Yes</IsPublic>
	<PrimaryCompanyContext>DataAreaId</PrimaryCompanyContext>
	<PrimaryKey>EntityKey</PrimaryKey>
	<PublicCollectionName>AAXTables</PublicCollectionName>
	<PublicEntityName>AAXTable</PublicEntityName>
	<SupportsSetBasedSqlOperations>Yes</SupportsSetBasedSqlOperations>
	<DeleteActions />
	<FieldGroups>
		<AxTableFieldGroup>
			<Name>AutoReport</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoLookup</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoIdentification</Name>
			<AutoPopulate>Yes</AutoPopulate>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoSummary</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoBrowse</Name>
			<Fields />
		</AxTableFieldGroup>
	</FieldGroups>
	<Fields>
		<AxDataEntityViewField xmlns=""
			i:type="AxDataEntityViewMappedField">
			<Name>id</Name>
			<DataField>id</DataField>
			<DataSource>AAXTable</DataSource>
		</AxDataEntityViewField>
		<AxDataEntityViewField xmlns=""
			i:type="AxDataEntityViewMappedField">
			<Name>name</Name>
			<DataField>name</DataField>
			<DataSource>AAXTable</DataSource>
		</AxDataEntityViewField>
	</Fields>
	<Keys>
		<AxDataEntityViewKey>
			<Name>EntityKey</Name>
			<Fields>
				<AxDataEntityViewKeyField>
					<DataField>id</DataField>
				</AxDataEntityViewKeyField>
			</Fields>
		</AxDataEntityViewKey>
	</Keys>
	<Mappings />
	<Ranges />
	<Relations />
	<StateMachines />
	<ViewMetadata>
		<Name>Metadata</Name>
		<SourceCode>
			<Methods>
				<Method>
					<Name>classDeclaration</Name>
					<Source><![CDATA[
[Query]
public class Metadata extends QueryRun
{
}
]]></Source>
				</Method>
			</Methods>
		</SourceCode>
		<DataSources>
			<AxQuerySimpleRootDataSource>
				<Name>AAXTable</Name>
				<DynamicFields>Yes</DynamicFields>
				<Table>AAXTable</Table>
				<DataSources />
				<DerivedDataSources />
				<Fields />
				<Ranges />
				<GroupBy />
				<Having />
				<OrderBy />
			</AxQuerySimpleRootDataSource>
		</DataSources>
	</ViewMetadata>
</AxDataEntityView>